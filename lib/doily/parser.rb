#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "lib/doily/parser.y".
#

require 'racc/parser'



  require 'strscan'


module Doily

  class Parser < Racc::Parser

module_eval <<'..end lib/doily/parser.y modeval..idaa5ce06162', 'lib/doily/parser.y', 32

  def parse(string)
    @tokens = []
    scanner = StringScanner.new(string)

    until scanner.empty?
      case
			when scanner.scan(/\s+/)
				# ignore space
      when m = scanner.scan(/function/)
        @tokens.push [:FUNCTION, m]
      when m = scanner.scan(/\(/)
        @tokens.push ['(', m]
      when m = scanner.scan(/\)/)
        @tokens.push [')', m]
      when m = scanner.scan(/\{/)
        @tokens.push ['{', m]
      when m = scanner.scan(/\}/)
        @tokens.push ['}', m]
      when m = scanner.scan(/[a-zA-Z]+/)
        @tokens.push [:IDENTIFIER, m]
      else
        raise ParseError.new(scanner)
      end
    end

    @tokens.push [false, false]
    do_parse
  end

  def next_token
    @tokens.shift
  end

..end lib/doily/parser.y modeval..idaa5ce06162

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 9, :_reduce_none,
 6, 10, :_reduce_2,
 0, 11, :_reduce_3,
 1, 11, :_reduce_4,
 1, 12, :_reduce_none,
 3, 13, :_reduce_6 ]

racc_reduce_n = 7

racc_shift_n = 16

racc_action_table = [
     1,     4,     5,     6,     7,     8,    12,    13,    14,    15 ]

racc_action_check = [
     0,     1,     2,     4,     5,     6,     8,     9,    12,    14 ]

racc_action_pointer = [
    -2,    -3,     2,   nil,    -2,     4,    -1,   nil,     3,     0,
   nil,   nil,     4,   nil,     4,   nil ]

racc_action_default = [
    -7,    -7,    -7,    -1,    -7,    -7,    -7,    16,    -3,    -7,
    -4,    -5,    -7,    -2,    -7,    -6 ]

racc_goto_table = [
     2,     3,     9,    10,    11 ]

racc_goto_check = [
     1,     2,     3,     4,     5 ]

racc_goto_pointer = [
   nil,     0,     1,    -6,    -5,    -4 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :FUNCTION => 2,
 :IDENTIFIER => 3,
 "(" => 4,
 ")" => 5,
 "{" => 6,
 "}" => 7 }

racc_use_result_var = true

racc_nt_base = 8

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'FUNCTION',
'IDENTIFIER',
'"("',
'")"',
'"{"',
'"}"',
'$start',
'target',
'function_definition',
'statement_list',
'statement',
'call_statement']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

 # reduce 1 omitted

module_eval <<'.,.,', 'lib/doily/parser.y', 10
  def _reduce_2( val, _values, result )
 result = Function.new(val[4])
   result
  end
.,.,

module_eval <<'.,.,', 'lib/doily/parser.y', 14
  def _reduce_3( val, _values, result )
 result = []
   result
  end
.,.,

module_eval <<'.,.,', 'lib/doily/parser.y', 15
  def _reduce_4( val, _values, result )
 result = [val[0]]
   result
  end
.,.,

 # reduce 5 omitted

module_eval <<'.,.,', 'lib/doily/parser.y', 23
  def _reduce_6( val, _values, result )
 result = Call.new(val[0])
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

  end   # class Parser

end   # module Doily
