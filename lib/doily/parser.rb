#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "lib/doily/parser.y".
#

require 'racc/parser'



  require 'strscan'


module Doily

  class Parser < Racc::Parser

module_eval <<'..end lib/doily/parser.y modeval..idccc9dbee68', 'lib/doily/parser.y', 45

  def parse(string)
    @tokens = []
    scanner = StringScanner.new(string)

    until scanner.empty?
      case
			when scanner.scan(/\s+/)
				# ignore space
      when m = scanner.scan(/function/)
        @tokens.push [:FUNCTION, m]
      when m = scanner.scan(/[(){},]/)
        @tokens.push [m, m]
      when m = scanner.scan(/[a-zA-Z]+/)
        @tokens.push [:IDENTIFIER, m]
      when m = scanner.scan(/"([^"])*"/)
        @tokens.push [:STRING_LITERAL, eval(m)] # CLEVER: eval turns '"foo"' into "foo"
      when m = scanner.scan(/\d+/)
        @tokens.push [:INTEGER_LITERAL, m.to_i]
      else
        raise ParseError.new(scanner)
      end
    end

    @tokens.push [false, false]
    do_parse
  end

  def next_token
    @tokens.shift
  end

..end lib/doily/parser.y modeval..idccc9dbee68

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 12, :_reduce_none,
 6, 13, :_reduce_2,
 0, 14, :_reduce_3,
 1, 14, :_reduce_4,
 1, 15, :_reduce_none,
 1, 15, :_reduce_none,
 1, 16, :_reduce_none,
 1, 16, :_reduce_none,
 4, 17, :_reduce_9,
 0, 18, :_reduce_10,
 1, 18, :_reduce_11,
 3, 18, :_reduce_12 ]

racc_reduce_n = 13

racc_shift_n = 23

racc_action_table = [
     9,    11,    13,     9,    11,    13,     9,    11,    13,     6,
     7,     8,     5,    16,    17,     4,    20,    21,     2 ]

racc_action_check = [
    20,    20,    20,    16,    16,    16,     8,     8,     8,     4,
     5,     7,     2,     9,    10,     1,    18,    19,     0 ]

racc_action_pointer = [
    16,    15,     6,   nil,     9,     3,   nil,     3,     3,     7,
     5,   nil,   nil,   nil,   nil,   nil,     0,   nil,     6,    10,
    -3,   nil,   nil ]

racc_action_default = [
   -13,   -13,   -13,    -1,   -13,   -13,    23,   -13,    -3,   -13,
   -13,    -7,    -4,    -8,    -5,    -6,   -10,    -2,   -11,   -13,
    -3,    -9,   -12 ]

racc_goto_table = [
    10,     1,     3,    18,    19,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    22 ]

racc_goto_check = [
     3,     1,     2,     4,     7,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     3 ]

racc_goto_pointer = [
   nil,     1,     2,    -8,   -13,   nil,   nil,   -12 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,    12,    14,    15,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :FUNCTION => 2,
 :IDENTIFIER => 3,
 :STRING_LITERAL => 4,
 :INTEGER_LITERAL => 5,
 "(" => 6,
 ")" => 7,
 "{" => 8,
 "}" => 9,
 "," => 10 }

racc_use_result_var = true

racc_nt_base = 11

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'FUNCTION',
'IDENTIFIER',
'STRING_LITERAL',
'INTEGER_LITERAL',
'"("',
'")"',
'"{"',
'"}"',
'","',
'$start',
'target',
'function_definition',
'expression_list',
'expression',
'literal',
'function_call',
'argument_list']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

 # reduce 1 omitted

module_eval <<'.,.,', 'lib/doily/parser.y', 10
  def _reduce_2( val, _values, result )
 result = Function.new(val[4])
   result
  end
.,.,

module_eval <<'.,.,', 'lib/doily/parser.y', 15
  def _reduce_3( val, _values, result )
 result = []
   result
  end
.,.,

module_eval <<'.,.,', 'lib/doily/parser.y', 16
  def _reduce_4( val, _values, result )
 result = [val[0]]
   result
  end
.,.,

 # reduce 5 omitted

 # reduce 6 omitted

 # reduce 7 omitted

 # reduce 8 omitted

module_eval <<'.,.,', 'lib/doily/parser.y', 30
  def _reduce_9( val, _values, result )
 result = FunctionCall.new(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'lib/doily/parser.y', 34
  def _reduce_10( val, _values, result )
 result = []
   result
  end
.,.,

module_eval <<'.,.,', 'lib/doily/parser.y', 35
  def _reduce_11( val, _values, result )
 result = [val[0]]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/doily/parser.y', 36
  def _reduce_12( val, _values, result )
 result = [val[0]] + val[2]
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

  end   # class Parser

end   # module Doily
